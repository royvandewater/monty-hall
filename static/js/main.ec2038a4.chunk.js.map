{"version":3,"sources":["Board.jsx","App.js","serviceWorker.js","index.js"],"names":["OpenDoor","chosen","contents","className","Door","isOpen","onClick","Board","props","doors","G","chooseDoor","moves","ctx","gameover","phase","winner","gameMessage","map","door","i","key","randomDoorIndex","Math","floor","random","Number","length","initializeDoors","Array","fill","hideContentsIfClosed","MontyHall","seed","Date","now","setup","playerView","phases","initialChoice","start","id","events","endPhase","next","finalChoice","onBegin","filter","nonChosenGoatDoors","INVALID_MOVE","forEach","endGame","App","Client","game","board","numPlayers","ai","enumerate","push","move","args","debug","impl","Debug","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec2038a4.chunk.js","sourcesContent":["import React from 'react'\nimport './Board.css'\n\nconst OpenDoor = ({chosen, contents}) => {\n  if (chosen) return <div className=\"door chosen\" >{contents}</div>\n  return <div className=\"door\">{contents}</div>\n}\n\nconst Door = ({chosen, contents, isOpen, onClick}) => {\n  if (isOpen) return <OpenDoor chosen={chosen} contents={contents} />\n  if (chosen) return <div className=\"door closed-door chosen\" onClick={onClick} />\n  return <div className=\"door closed-door\" onClick={onClick} />\n}\n\nconst gameMessage = (phase, gameover) =>\n  {\n    if (gameover) return `You ${gameover.winner ? 'Win' : 'Lose'}!`\n    if (phase === 'finalChoice') return 'Keep your door or switch?'\n    return 'Pick a door'\n  }\n\nconst Board = (props) => {\n  const { doors } = props.G\n  const { chooseDoor } = props.moves\n  const { gameover, phase } = props.ctx\n\n  return (\n    <main className=\"board\">\n      <h1 className=\"game-message\">{gameMessage(phase, gameover)}&nbsp;</h1>\n      <div className=\"doors\">\n        {doors.map((door, i) => <Door key={i} {...door} onClick={() => chooseDoor(i)} />)}\n      </div>\n    </main>\n  )\n}\n\nexport default Board","import { INVALID_MOVE } from 'boardgame.io/core'\nimport { Client } from 'boardgame.io/react'\nimport { Debug } from 'boardgame.io/debug'\n\nimport Board from './Board'\n\nconst randomDoorIndex = (ctx, doors) => \n  Math.floor(ctx.random.Number() * doors.length)\n\nconst initializeDoors = (ctx) => {\n  const doors = Array(3).fill({}).map(() => ({contents: 'goat', isOpen: false, chosen: false}))\n  doors[randomDoorIndex(ctx, doors)].contents = \"car\"\n  return doors\n}\n\nconst nonChosenGoatDoors = doors => doors.filter(door => !door.chosen && door.contents === 'goat')\nconst hideContentsIfClosed = ({chosen, contents, isOpen}) => \n  isOpen \n  ? {chosen, contents, isOpen} \n  : {chosen, isOpen}\n\nconst MontyHall = {\n  seed: Date.now(),\n\n  setup: (ctx) => ({\n    doors: initializeDoors(ctx),\n  }),\n\n  playerView: (G) => ({\n    doors: G.doors.map(hideContentsIfClosed),\n  }),\n\n  phases: {\n    initialChoice: {\n      start: true,\n      moves: {\n        chooseDoor: (G, ctx, id) => {\n          G.doors[id].chosen = true\n          ctx.events.endPhase()\n        },\n      },\n      next: 'finalChoice',\n    },\n    finalChoice: {\n      onBegin: (G, ctx) => {\n        const doors = nonChosenGoatDoors(G.doors)\n        doors[randomDoorIndex(ctx, doors)].isOpen = true\n      },\n      moves: {\n        chooseDoor: (G, ctx, id) => {\n          if (G.doors[id].isOpen) return INVALID_MOVE\n\n          G.doors.forEach(door => door.chosen = false)\n          G.doors[id].chosen = true\n          G.doors[id].isOpen = true\n          ctx.events.endGame({winner: G.doors[id].contents === 'car'})\n        }\n      },\n    }\n  },\n}\n\nconst ai = {\n  enumerate: G => {\n    let moves = []\n\n    G.doors.forEach((door, i) => {\n      if (door.isOpen) return\n\n      moves.push({move: 'chooseDoor', args: [i]})\n    })\n\n    return moves\n  }\n}\n\nconst App = Client({ game: MontyHall, board: Board, numPlayers: 1, ai, debug: { impl: Debug } })\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}